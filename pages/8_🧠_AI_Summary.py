import streamlit as st
import google.generativeai as genai

st.title("üß† AI Summary")
st.markdown("<p style='font-size: 1.1rem;'>Click the button below to get an AI-generated summary and commentary on the outputs from the features you've used across the app.</p>", unsafe_allow_html=True)

if st.button("Generate AI Summary", key="ais_generate_ai_summary_btn"): # Unique key
    if not st.session_state['ai_summary_data']:
        st.info("No data has been generated by the features yet. Please use the features in other pages first.")
    else:
        try:
            genai.configure(api_key=st.secrets["gemini"]["api_key"])
        except KeyError:
            st.error("Gemini API key not found in Streamlit secrets. Please set it as `gemini.api_key` in .streamlit/secrets.toml or Streamlit Cloud secrets.")
            st.stop()

        model = genai.GenerativeModel('gemini-1.5-flash')

        summary_prompt_parts = []
        summary_prompt_parts.append("You are an expert Indian financial advisor providing a summary and commentary. Below are outputs generated from various financial tools. Please consolidate this information, identify key insights, and provide actionable commentary. If a feature was not used, ignore it. Focus on the most relevant financial implications.\n\n")

        for feature_name, data in st.session_state['ai_summary_data'].items():
            summary_prompt_parts.append(f"--- {feature_name} Output ---")
            if feature_name == "Investment Plan":
                summary_prompt_parts.append(f"User Inputs: {data['user_inputs']}")
                summary_prompt_parts.append(f"AI Advice: {data['advice']}")
                summary_prompt_parts.append(f"Allocation: {data['allocation']}")
            elif feature_name == "Mutual Fund Research":
                summary_prompt_parts.append(f"Search Query: {data['query']}")
                summary_prompt_parts.append(f"Results: {data['results']}")
            elif feature_name == "Document Analysis":
                summary_prompt_parts.append(f"Document Question: {data['document_question']}")
                summary_prompt_parts.append(f"AI's Analysis: {data['ai_response']}")
            elif feature_name == "FRED Data":
                summary_prompt_parts.append(f"FRED Series ID: {data['series_id']}")
                summary_prompt_parts.append(f"Data Summary:\n{data['data_summary']}")
            elif feature_name == "Market Trend Visualization":
                summary_prompt_parts.append(f"Ticker: {data['ticker']}")
                summary_prompt_parts.append(f"Date Range: {data['date_range']}")
                summary_prompt_parts.append(f"Summary: {data['data_summary']}")
            elif feature_name == "Financial News":
                summary_prompt_parts.append(f"Number of Articles: {data['number_of_articles']}")
                summary_prompt_parts.append(f"Articles:\n{data['articles_summary']}")
            elif feature_name == "Company Financials":
                summary_prompt_parts.append(f"Company Ticker: {data['ticker']}")
                summary_prompt_parts.append(f"Statement Type: {data['statement_type']}")
                summary_prompt_parts.append(f"Financial Data (Head):\n{data['financial_data_head']}")
            elif feature_name == "Direct AI Question":
                summary_prompt_parts.append(f"User Question: {data['question']}")
                summary_prompt_parts.append(f"AI Response: {data['ai_response']}")
            summary_prompt_parts.append("\n")

        full_summary_prompt = "\n".join(summary_prompt_parts)

        with st.spinner("Generating AI Summary..."):
            try:
                summary_response = model.generate_content(contents=[{"role": "user", "parts": [full_summary_prompt]}])
                st.subheader("üìù Consolidated AI Summary and Commentary:")
                st.markdown(f"<p style='color: white;'>{summary_response.text}</p>", unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating AI Summary: {e}. This might be due to API token limits or other issues. Try reducing the amount of data generated by the features, or simplify your previous requests.")

st.markdown("---")
