import streamlit as st
import google.generativeai as genai
import base64

# --- Function to get base64 encoded image ---
def get_base64_image(image_path):
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode()
    except FileNotFoundError:
        return None

# --- Set Background ---
encoded_image = get_base64_image("black-particles-background.avif")
if encoded_image:
    background_css = f"""
    <style>
    .stApp {{
        background-image: url("data:image/avif;base64,{encoded_image}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }}
    </style>
    """
    st.markdown(background_css, unsafe_allow_html=True)


# --- Page Content ---
st.title("üß† AI Summary")
st.markdown("<p style='font-size: 1.1rem;'>Click the button below to get an AI-generated summary and commentary on the outputs from the features you've used across the app.</p>", unsafe_allow_html=True)

if st.button("Generate AI Summary", key="ais_generate_ai_summary_btn"):
    # This .get() method safely checks if the key exists without causing a KeyError
    if not st.session_state.get('ai_summary_data'):
        st.info("No data has been generated by the features yet. Please use the features in other pages first.")
    else:
        try:
            genai.configure(api_key=st.secrets["gemini"]["api_key"])
        except KeyError:
            st.error("Gemini API key not found in Streamlit secrets.")
            st.stop()

        model = genai.GenerativeModel('gemini-1.5-flash')

        summary_prompt_parts = ["You are an expert Indian financial advisor providing a summary. Consolidate the following information, identify key insights, and provide actionable commentary.\n\n"]

        for feature_name, data in st.session_state['ai_summary_data'].items():
            summary_prompt_parts.append(f"--- {feature_name} Output ---\n")
            # This loop converts the data dictionary to a readable string format
            for key, value in data.items():
                summary_prompt_parts.append(f"{key.replace('_', ' ').title()}: {value}\n")
            summary_prompt_parts.append("\n")

        full_summary_prompt = "".join(summary_prompt_parts)

        with st.spinner("Generating AI Summary..."):
            try:
                summary_response = model.generate_content(full_summary_prompt)
                st.subheader("üìù Consolidated AI Summary and Commentary:")
                st.markdown(summary_response.text, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Error generating AI Summary: {e}")

st.markdown("---")
